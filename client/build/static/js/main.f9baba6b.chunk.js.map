{"version":3,"sources":["logo.svg","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Canvas","canvasRef","useRef","ctxRef","configRef","useEffect","canvas","current","getContext","currentPos","x","y","color","tool","size","console","log","drawStart","e","drawEnd","drawMove","data","config","to","clientX","clientY","drawCanvas","ctx","beginPath","moveTo","lineTo","stroke","closePath","ref","width","height","onMouseDown","onMouseUp","onMouseOut","onMouseMove","onTouchStart","onTouchEnd","onTouchCancel","onTouchMove","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,4HCyE5BC,EAvEA,WACb,IAAMC,EAAYC,iBAAO,MACnBC,EAASD,mBACTE,EAAYF,mBAClBG,qBAAU,WACR,IAAMC,EAASL,EAAUM,QACzBJ,EAAOI,QAAUD,EAAOE,WAAW,MACnCJ,EAAUG,QAAU,CAClBE,WAAW,CAACC,EAAE,EAAEC,EAAE,GAClBC,MAAM,UACNC,KAAK,OACLC,KAAK,KAEPC,QAAQC,IAAIf,EAAWA,EAAUM,YAGnC,IAAMU,EAAY,SAACC,GACjBH,QAAQC,IAAI,YAAaE,IAGrBC,EAAU,SAACD,GACfH,QAAQC,IAAI,UAAZ,eAA2BE,KAEvBE,EAAW,SAACF,GAChBH,QAAQC,IAAI,WAAZ,eAA4BE,IAC5B,IAAMG,EAAO,CACXC,OAAOlB,EAAUG,QACjBgB,GAAG,CAACL,EAAEM,QAASN,EAAEO,UAGnBC,EAAWL,GAEXjB,EAAUG,QAAV,eACKH,EAAUG,QADf,CAEEE,WAAWY,EAAKE,MAIdG,EAAa,SAACL,GAClBN,QAAQC,IAAI,CAACK,SACb,IAAMM,EAAMxB,EAAOI,QACnB,OAAOc,EAAKC,OAAOT,MACjB,IAAK,OACHc,EAAIC,YACJD,EAAIE,OAAJ,MAAAF,EAAG,YAAWN,EAAKC,OAAOb,aAC1BkB,EAAIG,OAAJ,MAAAH,EAAG,YAAWN,EAAKE,KACnBI,EAAII,SACJJ,EAAIK,cAOV,OACE,6BACE,4BAAQC,IAAKhC,EAAWiC,MAAM,MAAMC,OAAO,MACzCC,YAAanB,EACboB,UAAWlB,EACXmB,WAAYnB,EACZoB,YAAanB,EAEboB,aAAcvB,EACdwB,WAAYtB,EACZuB,cAAevB,EACfwB,YAAavB,MCxDNwB,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.f9baba6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useRef, useEffect } from 'react'\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const ctxRef = useRef();\n  const configRef = useRef();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    ctxRef.current = canvas.getContext('2d');\n    configRef.current = {\n      currentPos:{x:0,y:0},\n      color:'#ff0000',\n      tool:'line',\n      size:'2',\n    }\n    console.log(canvasRef, canvasRef.current);\n  })\n\n  const drawStart = (e) => {\n    console.log('drawStart', e)\n\n  }\n  const drawEnd = (e) => {\n    console.log('drawEnd', {...e})\n  }\n  const drawMove = (e) => {\n    console.log('drawMove', {...e});\n    const data = {\n      config:configRef.current,\n      to:[e.clientX, e.clientY],\n    }\n    \n    drawCanvas(data);\n    // sendDraw(data);\n    configRef.current = {\n      ...configRef.current,\n      currentPos:data.to\n    };\n  }\n\n  const drawCanvas = (data, )=>{\n    console.log({data});\n    const ctx = ctxRef.current\n    switch(data.config.tool){\n      case 'line':\n        ctx.beginPath();\n        ctx.moveTo(...data.config.currentPos);\n        ctx.lineTo(...data.to);\n        ctx.stroke();\n        ctx.closePath();\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width='500' height='500'\n        onMouseDown={drawStart}\n        onMouseUp={drawEnd}\n        onMouseOut={drawEnd}\n        onMouseMove={drawMove}\n\n        onTouchStart={drawStart}\n        onTouchEnd={drawEnd}\n        onTouchCancel={drawEnd}\n        onTouchMove={drawMove}\n      />\n    </div>\n  );\n}\n\nexport default Canvas\n","import React, { useRef, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Canvas from './Canvas';\n\nfunction App() {\n  return (\n    <Canvas/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}